## entrar com o seguinte comando:
source("survey_44763_R_syntax_file.R", encoding = "UTF-8")
## deve ter na mesma pasta o arquivo survey_44763_R_data_file.csv
## Isso vai carregar o csv com os dados das respostas e as funções auxiliares criadas pelo limesurvey.

# Para gerar os boxplots de experiência com prog.
> par(mfrow = c(1,2)) 
> boxplot(data[,41], ylim=c(0,30))
> boxplot(data[,42], ylim=c(0,30))


library(irr)

convertRatings <- function (ratings) 
{
    lev <- levels(as.factor(ratings))
    ratings <- as.matrix(na.omit(ratings))
    ns <- nrow(ratings)
    target <- array(0, dim=c(ns,4))
    for (i in 1:ns) {
	if(ratings[i] == lev[1])
		target[i, 1] <- 1
	else if(ratings[i] == lev[2])
		target[i, 2] <- 1
	else if(ratings[i] == lev[3])
		target[i, 3] <- 1
	else if(ratings[i] == lev[4])
		target[i, 4] <- 1
    }
    return(target)
}


# data[,19] contém as respostas da primeira comparação

ratings1 <- convertRatings (data[,19])

> kappam.fleiss(ratings1)
 Fleiss' Kappa for m Raters

 Subjects = 80 
   Raters = 4 
    Kappa = -0.333 

        z = -7.3 
  p-value = 2.82e-13 

# data[,21] contém as respostas da primeira comparação

ratings2 <- covertRatings (data[,21])

> kappam.fleiss(ratings2)
 Fleiss' Kappa for m Raters

 Subjects = 80 
   Raters = 4 
    Kappa = -0.333 

        z = -7.3 
  p-value = 2.82e-13 

# data[,23] contém as respostas da primeira comparação

ratings3 <- covertRatings (data[,23])

> kappam.fleiss(ratings3)
 Fleiss' Kappa for m Raters

 Subjects = 80 
   Raters = 4 
    Kappa = -0.333 

        z = -7.3 
  p-value = 2.82e-13 


> ratingsToRow <- function (ratings) 
+ {
+     #ns is used just to iterate the for loop
+     ns <- nrow(ratings)
+ 
+     # the row to represent the sum of ratings
+     target <- array(0, dim=c(1,4))
+ 
+     for (j in 1:4){
+        colSum <- 0
+        for (i in 1:ns) {
+           colSum <- colSum + ratings[i, j]  
+        }
+        target[j] <- colSum
+     }
+     return(target)
+ }
> ratings1_row <- ratingsToRow(ratings1)
> ratings1_row
     [,1] [,2] [,3] [,4]
[1,]   45    4   30    1
> ratings2_row <- ratingsToRow(ratings2)
> ratings2_row
     [,1] [,2] [,3] [,4]
[1,]   54   10   15    1
> ratings3_row <- ratingsToRow(ratings3)
> ratings3_row
     [,1] [,2] [,3] [,4]
[1,]    6   43   30    1


> ratings <- array(dim=c(3,4))
> ratings
     [,1] [,2] [,3] [,4]
[1,]   NA   NA   NA   NA
[2,]   NA   NA   NA   NA
[3,]   NA   NA   NA   NA
> ratings [1,] <- ratings1_row
> ratings [2,] <- ratings2_row
> ratings [3,] <- ratings3_row
> ratings
     [,1] [,2] [,3] [,4]
[1,]   45    4   30    1
[2,]   54   10   15    1
[3,]    6   43   30    1

> kappam.fleiss(ratings)
 Fleiss' Kappa for m Raters

 Subjects = 3 
   Raters = 4 
    Kappa = -0.161 

        z = -1.78 
  p-value = 0.075 


#final conversion to apply fleiss kappa per question
# the resulting matrix has 2 rows -- one for each class in the survey 
# comparison question. For each "first class is more cohesive" answer 
# row1 increments. For each "second class is more cohesive" answer row2
# increments. If "similar cohesion" or "i don't know" answers then 
# increments both rows
convertRatings2 <- function (ratings) 
{
    #ns is used just to iterate the for loop
    ns <- nrow(ratings)

    # the resulting matrix
    target <- array(0, dim=c(2,3))

    for (j in 1:4){
       for (i in 1:ns) {
	  if (j == 1)
	  	target[1,1] = target[1,1] + ratings[i,j]
	  else if (j == 2)
	  	target[2,1] = target[2,1] + ratings[i,j]
	  else if (j == 3){
	  	target[1,2] = target[1,2] + ratings[i,j]
	  	target[2,2] = target[2,2] + ratings[i,j]
	  }
	  else if (j == 4){
	  	target[1,3] = target[1,3] + ratings[i,j]
	  	target[2,3] = target[2,3] + ratings[i,j]
	  }
       }
    }
    return(target)
}

> ratings1_1 <- convertRatings2(ratings1)
> ratings1_1
     [,1] [,2] [,3]
[1,]   45   30    1
[2,]    4   30    1

> kappam.fleiss(ratings1_1)
 Fleiss' Kappa for m Raters

 Subjects = 2 
   Raters = 3 
    Kappa = -0.385 

        z = -1.57 
  p-value = 0.117 
> 

> ratings2_1 <- convertRatings2(ratings2)
> ratings2_1
     [,1] [,2] [,3]
[1,]   54   15    1
[2,]   10   15    1

> kappam.fleiss(ratings2_1)
 Fleiss' Kappa for m Raters

 Subjects = 2 
   Raters = 3 
    Kappa = -0.385 

        z = -1.57 
  p-value = 0.117 
> 

> ratings3_1 <- convertRatings2(ratings3)
> ratings3_1
     [,1] [,2] [,3]
[1,]    6   30    1
[2,]   43   30    1
> kappam.fleiss(ratings3_1)
 Fleiss' Kappa for m Raters

 Subjects = 2 
   Raters = 3 
    Kappa = -0.385 

        z = -1.57 
  p-value = 0.117 
> 

------------------------------------------------------------------------
	APÓS ANALISAR OS DADOS DO PAPER SOBRE COMPLEXIDADE
	...procurei organizar os dados da mesma maneira que 
	os autores desse paper fizeram.
------------------------------------------------------------------------
source("survey_44763_R_syntax_file.R", encoding = "UTF-8")
#deve ter na mesma pasta o arquivo survey_44763_R_data_file.csv

library(irr)

convertRatings <- function (ratings) 
{
    lev <- levels(as.factor(ratings))
    ratings <- as.matrix(na.omit(ratings))
    ns <- nrow(ratings)
    target <- array(0, dim=c(ns,4))
    for (i in 1:ns) {
	if(ratings[i] == lev[1])
		target[i, 1] <- 1
	else if(ratings[i] == lev[2])
		target[i, 2] <- 1
	else if(ratings[i] == lev[3])
		target[i, 3] <- 1
	else if(ratings[i] == lev[4])
		target[i, 4] <- 1
    }
    return(target)
}


# data[,19] contém as respostas da primeira comparação

ratings1 <- convertRatings (data[,19])
> ratings1
      [,1] [,2] [,3] [,4]
 [1,]    1    0    0    0
 [2,]    1    0    0    0
 [3,]    1    0    0    0
 [4,]    0    0    1    0
 [5,]    0    0    1    0
 [6,]    0    0    1    0
 [7,]    1    0    0    0
 [8,]    1    0    0    0
 [9,]    0    0    1    0
[10,]    1    0    0    0
[11,]    1    0    0    0
[12,]    1    0    0    0
[13,]    1    0    0    0
[14,]    1    0    0    0
[15,]    0    1    0    0
[16,]    1    0    0    0
[17,]    0    0    1    0
[18,]    1    0    0    0
[19,]    0    0    1    0
[20,]    1    0    0    0
[21,]    0    0    1    0
[22,]    0    0    1    0
[23,]    0    0    1    0
[24,]    0    0    1    0
[25,]    0    0    1    0
[26,]    1    0    0    0
[27,]    1    0    0    0
[28,]    0    1    0    0
[29,]    0    0    1    0
[30,]    0    0    1    0
[31,]    1    0    0    0
[32,]    0    0    1    0
[33,]    1    0    0    0
[34,]    1    0    0    0
[35,]    1    0    0    0
[36,]    1    0    0    0
[37,]    0    0    1    0
[38,]    0    0    1    0
[39,]    1    0    0    0
[40,]    1    0    0    0
[41,]    1    0    0    0
[42,]    1    0    0    0
[43,]    0    0    1    0
[44,]    1    0    0    0
[45,]    1    0    0    0
[46,]    1    0    0    0
[47,]    1    0    0    0
[48,]    0    0    1    0
[49,]    1    0    0    0
[50,]    1    0    0    0
[51,]    0    0    1    0
[52,]    0    0    0    1
[53,]    1    0    0    0
[54,]    0    1    0    0
[55,]    1    0    0    0
[56,]    0    0    1    0
[57,]    1    0    0    0
[58,]    1    0    0    0
[59,]    1    0    0    0
[60,]    0    0    1    0
[61,]    1    0    0    0
[62,]    0    0    1    0
[63,]    1    0    0    0
[64,]    0    0    1    0
[65,]    1    0    0    0
[66,]    1    0    0    0
[67,]    0    0    1    0
[68,]    1    0    0    0
[69,]    0    0    1    0
[70,]    1    0    0    0
[71,]    0    0    1    0
[72,]    1    0    0    0
[73,]    1    0    0    0
[74,]    0    0    1    0
[75,]    0    0    1    0
[76,]    0    0    1    0
[77,]    1    0    0    0
[78,]    1    0    0    0
[79,]    0    0    1    0
[80,]    0    1    0    0

convertRatings3 <- function (ratings) 
{
    #ns is used just to iterate the for loop
    # and to define the number of columns in the target matrix
    ns <- nrow(ratings)

    # the resulting matrix
    target <- array(dim=c(2,ns))

    for (i in 1:ns){
       for (j in 1:4) {
	  if ((j == 1) && (ratings[i, j] == 1)){
		target[1,i] = ">"
		target[2,i] = "<"
		j = 5
	  }
	  else if ((j == 2) && (ratings[i, j] == 1)){
		target[1,i] = "<"
		target[2,i] = ">"
		j = 5
	  }
	  else if ((j == 3) && (ratings[i, j] == 1)){
		target[1,i] = "="
		target[2,i] = "="
		j = 5
	  }
	  else if ((j == 4) && (ratings[i, j] == 1)){
		target[1,i] = "?"
		target[2,i] = "?"
		j = 5
	  }
       }
    }
    return(target)
}

> ratings1_1 <- convertRatings3(ratings1)
> ratings1_1
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28]
[1,] ">"  ">"  ">"  "="  "="  "="  ">"  ">"  "="  ">"   ">"   ">"   ">"   ">"   "<"   ">"   "="   ">"   "="   ">"   "="   "="   "="   "="   "="   ">"   ">"   "<"  
[2,] "<"  "<"  "<"  "="  "="  "="  "<"  "<"  "="  "<"   "<"   "<"   "<"   "<"   ">"   "<"   "="   "<"   "="   "<"   "="   "="   "="   "="   "="   "<"   "<"   ">"  
     [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] [,51] [,52] [,53] [,54] [,55]
[1,] "="   "="   ">"   "="   ">"   ">"   ">"   ">"   "="   "="   ">"   ">"   ">"   ">"   "="   ">"   ">"   ">"   ">"   "="   ">"   ">"   "="   "?"   ">"   "<"   ">"  
[2,] "="   "="   "<"   "="   "<"   "<"   "<"   "<"   "="   "="   "<"   "<"   "<"   "<"   "="   "<"   "<"   "<"   "<"   "="   "<"   "<"   "="   "?"   "<"   ">"   "<"  
     [,56] [,57] [,58] [,59] [,60] [,61] [,62] [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] [,75] [,76] [,77] [,78] [,79] [,80]
[1,] "="   ">"   ">"   ">"   "="   ">"   "="   ">"   "="   ">"   ">"   "="   ">"   "="   ">"   "="   ">"   ">"   "="   "="   "="   ">"   ">"   "="   "<"  
[2,] "="   "<"   "<"   "<"   "="   "<"   "="   "<"   "="   "<"   "<"   "="   "<"   "="   "<"   "="   "<"   "<"   "="   "="   "="   "<"   "<"   "="   ">"  
> kappam.fleiss(ratings1_1)
 Fleiss' Kappa for m Raters

 Subjects = 2 
   Raters = 80 
    Kappa = 0.185 

        z = 21.3 
  p-value = 0 

===============================
===============================
=============================== Agora testando excluindo a coluna 52
===============================
===============================

convertRatings3 <- function (ratings) 
{
    #ns is used just to iterate the for loop
    # and to define the number of columns in the target matrix
    ns <- nrow(ratings)

    # the resulting matrix
    target <- array(dim=c(2,ns))

    for (i in 1:ns){
       for (j in 1:4) {
	  if ((j == 1) && (ratings[i, j] == 1)){
		target[1,i] = ">"
		target[2,i] = "<"
		j = 5
	  }
	  else if ((j == 2) && (ratings[i, j] == 1)){
		target[1,i] = "<"
		target[2,i] = ">"
		j = 5
	  }
	  else if ((j == 3) && (ratings[i, j] == 1)){
		target[1,i] = "="
		target[2,i] = "="
		j = 5
	  }
       }
    }
    return(target)
}

> ratings1_1 <- convertRatings3(ratings1)
> ratings1_1
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28]
[1,] ">"  ">"  ">"  "="  "="  "="  ">"  ">"  "="  ">"   ">"   ">"   ">"   ">"   "<"   ">"   "="   ">"   "="   ">"   "="   "="   "="   "="   "="   ">"   ">"   "<"  
[2,] "<"  "<"  "<"  "="  "="  "="  "<"  "<"  "="  "<"   "<"   "<"   "<"   "<"   ">"   "<"   "="   "<"   "="   "<"   "="   "="   "="   "="   "="   "<"   "<"   ">"  
     [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] [,51] [,52] [,53] [,54] [,55]
[1,] "="   "="   ">"   "="   ">"   ">"   ">"   ">"   "="   "="   ">"   ">"   ">"   ">"   "="   ">"   ">"   ">"   ">"   "="   ">"   ">"   "="   NA    ">"   "<"   ">"  
[2,] "="   "="   "<"   "="   "<"   "<"   "<"   "<"   "="   "="   "<"   "<"   "<"   "<"   "="   "<"   "<"   "<"   "<"   "="   "<"   "<"   "="   NA    "<"   ">"   "<"  
     [,56] [,57] [,58] [,59] [,60] [,61] [,62] [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] [,75] [,76] [,77] [,78] [,79] [,80]
[1,] "="   ">"   ">"   ">"   "="   ">"   "="   ">"   "="   ">"   ">"   "="   ">"   "="   ">"   "="   ">"   ">"   "="   "="   "="   ">"   ">"   "="   "<"  
[2,] "="   "<"   "<"   "<"   "="   "<"   "="   "<"   "="   "<"   "<"   "="   "<"   "="   "<"   "="   "<"   "<"   "="   "="   "="   "<"   "<"   "="   ">"  

> ratings1_1_NAomited <- ratings1_1[,-52]
> ratings1_1_NAomited

     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28]
[1,] ">"  ">"  ">"  "="  "="  "="  ">"  ">"  "="  ">"   ">"   ">"   ">"   ">"   "<"   ">"   "="   ">"   "="   ">"   "="   "="   "="   "="   "="   ">"   ">"   "<"  
[2,] "<"  "<"  "<"  "="  "="  "="  "<"  "<"  "="  "<"   "<"   "<"   "<"   "<"   ">"   "<"   "="   "<"   "="   "<"   "="   "="   "="   "="   "="   "<"   "<"   ">"  
     [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] [,51] [,52] [,53] [,54] [,55]
[1,] "="   "="   ">"   "="   ">"   ">"   ">"   ">"   "="   "="   ">"   ">"   ">"   ">"   "="   ">"   ">"   ">"   ">"   "="   ">"   ">"   "="   ">"   "<"   ">"   "="  
[2,] "="   "="   "<"   "="   "<"   "<"   "<"   "<"   "="   "="   "<"   "<"   "<"   "<"   "="   "<"   "<"   "<"   "<"   "="   "<"   "<"   "="   "<"   ">"   "<"   "="  
     [,56] [,57] [,58] [,59] [,60] [,61] [,62] [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] [,75] [,76] [,77] [,78] [,79]
[1,] ">"   ">"   ">"   "="   ">"   "="   ">"   "="   ">"   ">"   "="   ">"   "="   ">"   "="   ">"   ">"   "="   "="   "="   ">"   ">"   "="   "<"  
[2,] "<"   "<"   "<"   "="   "<"   "="   "<"   "="   "<"   "<"   "="   "<"   "="   "<"   "="   "<"   "<"   "="   "="   "="   "<"   "<"   "="   ">"  

> kappam.fleiss(ratings1_1_NAomited)
 Fleiss' Kappa for m Raters

 Subjects = 2 
   Raters = 79 
    Kappa = 0.193 

        z = 21.4 
  p-value = 0 
> 



ratings2 <- convertRatings (data[,21])
ratings2_1 <- convertRatings3(ratings2)
ratings2_1_NAomited <- ratings2_1[,-52]
kappam.fleiss(ratings2_1_NAomited)

 Fleiss' Kappa for m Raters

 Subjects = 2 
   Raters = 79 
    Kappa = 0.234 

        z = 25.1 
  p-value = 0 



ratings3 <- convertRatings (data[,23])
ratings3_1 <- convertRatings3(ratings3)
ratings3_1_NAomited <- ratings3_1[,-41]
kappam.fleiss(ratings3_1_NAomited)

 Fleiss' Kappa for m Raters

 Subjects = 2 
   Raters = 79 
    Kappa = 0.155 

        z = 17.1 
  p-value = 0 

--------------------------------------------------
--------------------------------------------------
Now correcting the mistakes made by some
 participants on the third comparison
--------------------------------------------------
--------------------------------------------------
ratings3 <- convertRatings (data[,23])
ratings3_1 <- convertRatings3(ratings3)

ratings3_1[,4] <- "<"
ratings3_1[,10] <- "<"
ratings3_1[,71] <- "<"
ratings3_1[,80] <- "<"
ratings3_1_NAomited <- ratings3_1[,-41]
kappam.fleiss(ratings3_1_NAomited)

 Fleiss' Kappa for m Raters

 Subjects = 2 
   Raters = 79 
    Kappa = 0.183 

        z = 20.3 
  p-value = 0 

=======================================================================
=======================================================================
Crossing programming experience with coh familiarity question
=======================================================================
=======================================================================

cohFamiliarity_Experience <- matrix(ncol=7, nrow=80)
colnames(cohFamiliarity_Experience ) <- c("Coh_Familiarity", "AcademicDegree", "ProgExp", "ProgExpCompColleagues", "Exp_OOP", "Years_Prog", "Years_ProgLargeProj")
cohFamiliarity_Experience[,1] <- data[,16]
cohFamiliarity_Experience[,2] <- data[,25]
cohFamiliarity_Experience[,3] <- data[,37]
cohFamiliarity_Experience[,4] <- data[,38]
cohFamiliarity_Experience[,5] <- data[,40]
cohFamiliarity_Experience[,6] <- data[,41]
cohFamiliarity_Experience[,7] <- data[,42]
cohFamiliarity_Experience <- as.table(cohFamiliarity_Experience)
cohFamiliarity_Experience
   Coh_Familiarity AcademicDegree ProgExp ProgExpCompColleagues Exp_OOP Years_Prog Years_ProgLargeProj
A              1.0            4.0     8.0                   4.0     5.0       13.0                 4.0
B              1.0            2.0     8.0                   3.0     5.0        5.0                 4.0
C              1.0            5.0     8.0                   4.0     5.0        8.0                 2.0
D              1.0            3.0     8.0                   4.0     3.0        6.0                 4.0
E              2.0            3.0     9.0                   4.0     4.0        6.0                 4.0
F              1.0            2.0     8.0                   5.0     5.0        4.0                 2.0
G              1.0            2.0     8.0                   4.0     4.0        5.0                 3.0
H              1.0            4.0     5.0                   3.0     4.0       22.0                 0.0
I              1.0            2.0     8.0                   2.0     3.0        5.0                 3.0
J              1.0            4.0     9.0                   4.0     3.0       10.0                 7.0
K              1.0            2.0     9.0                   4.0     5.0        5.0                 4.0
L              1.0            4.0     9.0                   5.0     5.0       13.0                11.0
M              1.0            4.0     9.0                   5.0     5.0       12.0                 4.0
N              1.0            4.0     7.0                   3.0     3.0        5.0                 3.0
O              1.0            2.0     7.0                   3.0     5.0        5.0                 2.0
P              2.0            2.0     4.0                   3.0     3.0        8.0                 0.0
Q              1.0            3.0     9.0                   3.0     5.0        6.0                 6.0
R              1.0            1.0    10.0                   5.0     5.0       10.0                10.0
S              1.0            4.0     8.0                   3.0     3.0       29.0                 5.0
T              1.0            4.0     7.0                   4.0     4.0        6.0                 2.0
U              1.0            4.0     8.0                   3.0     4.0       10.0                 5.0
V              1.0            2.0     7.0                   3.0     3.0        4.0                 2.0
W              1.0            2.0     5.0                   3.0     3.0        6.0                 1.0
X              1.0            2.0     8.0                   4.0     4.0        8.0                 7.0
Y              1.0            3.0     4.0                   3.0     3.0        1.0                 1.0
Z              1.0            2.0     9.0                   4.0     5.0       11.0                 7.0
A1             2.0            2.0     8.0                   4.0     4.0        5.0                 3.0
B1             1.0            2.0     9.0                   4.0     4.0       10.0                 7.0
C1             1.0            2.0     5.0                   3.0     4.0       24.0                 3.0
D1             1.0            2.0     9.0                   4.0     4.0       12.0                 5.0
E1             1.0            4.0     8.0                   4.0     4.0       11.0                 3.0
F1             1.0            3.0     9.0                   4.0     5.0        5.0                 5.0
G1             1.0            2.0     9.0                   4.0     4.0       10.0                 6.0
H1             1.0            4.0     6.0                   2.0     3.0        4.0                 2.0
I1             1.0            2.0     6.0                   3.0     3.0        5.0                 3.0
J1             2.0            2.0     7.0                   4.0     4.0        7.0                 6.0
K1             1.0            4.0     7.0                   3.0     4.0        9.0                 1.0
L1             1.0            2.0     9.0                   4.0     4.0       11.0                 6.0
M1             1.0            4.0     8.0                   4.0     3.0       15.0                 0.0
N1             1.0            4.0     7.0                   4.0     4.0        9.0                 2.0
O1             1.0            3.0     8.0                   4.0     4.0        8.0                 5.0
P1             1.0            4.0     8.0                   4.0     4.0       20.0                 8.0
Q1             1.0            4.0     8.0                   4.0     5.0        9.0                 2.0
R1             1.0            4.0     7.0                   4.0     4.0        8.0                 0.0
S1             1.0            4.0     8.0                   4.0     5.0       14.0                 6.0
T1             1.0            3.0     8.0                   4.0     4.0       15.0                 8.0
U1             1.0            3.0     9.0                   5.0     5.0        7.0                 6.0
V1             2.0            4.0     6.0                   2.0     3.0       16.0                 0.0
W1             2.0            2.0     9.0                   4.0     3.0       11.0                 7.0
X1             1.0            2.0     6.0                   3.0     4.0        5.0                 0.0
Y1             1.0            2.0     3.0                   2.0     3.0        5.0                 0.0
Z1             2.0            2.0     7.0                   3.0     4.0        7.0                 6.0
A2             1.0            2.0     7.0                   3.0     4.0        5.0                 3.0
B2             1.0            4.0     9.0                   5.0     5.0       25.0                12.0
C2             1.0            4.0     7.0                   4.0     4.0       10.0                 7.0
D2             1.0            3.0     8.0                   4.0     4.0        6.0                 3.0
E2             1.0            4.0     9.0                   4.0     4.0       12.0                 3.0
F2             1.0            4.0     7.0                   3.0     4.0        5.0                 3.0
G2             1.0            3.0     9.0                   4.0     4.0       13.0                10.0
H2             1.0            4.0     9.0                   4.0     4.0        8.0                 6.0
I2             1.0            3.0     8.0                   4.0     4.0        8.0                 6.0
J2             1.0            5.0     8.0                   4.0     5.0        5.0                 1.0
K2             1.0            5.0     7.0                   3.0     4.0       10.0                 0.0
L2             1.0            5.0     4.0                   2.0     3.0        7.0                 0.0
M2             1.0            5.0     9.0                   4.0     4.0       20.0                13.0
N2             1.0            4.0     8.0                   4.0     4.0       15.0                15.0
O2             1.0            4.0    10.0                   5.0     5.0       15.0                 5.0
P2             1.0            5.0     8.0                   5.0     5.0       18.0                10.0
Q2             1.0            4.0     8.0                   4.0     4.0       10.0                 4.0
R2             1.0            5.0    10.0                   5.0     5.0       14.0                 7.0
S2             2.0            5.0     4.0                   4.0     4.0        3.0                 1.0
T2             1.0            5.0     6.0                   3.0     4.0       15.0                 3.0
U2             1.0            4.0     8.0                   4.0     5.0        8.0                 4.0
V2             1.0            1.0     6.0                   3.0     3.0        4.0                 4.0
W2             1.0            2.0     7.0                   3.0     4.0        5.0                 1.5
X2             2.0            4.0     8.0                   4.0     4.0        7.0                 4.0
Y2             1.0            4.0     8.0                   4.0     5.0        7.0                 2.0
Z2             1.0            4.0     8.0                   4.0     4.0       15.0                15.0
A3             1.0            4.0     8.0                   4.0     4.0       15.0                 0.0
B3             1.0            4.0     6.0                   3.0     4.0        6.0                 0.0


=======================================================================
=======================================================================
Crossing programming experience with cohesion ratings
=======================================================================
=======================================================================

ratingsVSexperience <- matrix(ncol=12, nrow=80)
colnames(ratingsVSexperience) <- c("comp1", "comp1_expl", "comp2", "comp2_expl", "comp3", "comp3_expl", "AcademicDegree", "ProgExp", "ProgExpCompColleagues", "Exp_OOP", "Years_Prog", "Years_ProgLargeProj")
ratingsVSexperience [,1] <- data[,19]
ratingsVSexperience [,2] <- data[,20]
ratingsVSexperience [,3] <- data[,21]
ratingsVSexperience [,4] <- data[,22]
ratingsVSexperience [,5] <- data[,23]
ratingsVSexperience [,6] <- data[,24]
ratingsVSexperience [,7] <- data[,25]
ratingsVSexperience [,8] <- data[,37]
ratingsVSexperience [,9] <- data[,38]
ratingsVSexperience [,10] <- data[,40]
ratingsVSexperience [,11] <- data[,41]
ratingsVSexperience [,12] <- data[,42]
ratingsVSexperience <- as.table(ratingsVSexperience)

write.csv(ratingsVSexperience, file = "ratingsVSexperience.csv", quote = TRUE, sep = ",", ow.names = FALSE, col.names = TRUE)



ratingsVSexperience <- matrix(ncol=13, nrow=80)
colnames(ratingsVSexperience) <- c("comp1", "comp1_expl", "comp2", "comp2_expl", "comp3", "comp3_expl", "AcademicDegree", "ProgExp", "ProgExpCompColleagues", "Exp_OOP", "Years_Prog", "Years_ProgLargeProj", "coh_Familiarity")
ratingsVSexperience [,1] <- data[,19]
ratingsVSexperience [,2] <- data[,20]
ratingsVSexperience [,3] <- data[,21]
ratingsVSexperience [,4] <- data[,22]
ratingsVSexperience [,5] <- data[,23]
ratingsVSexperience [,6] <- data[,24]
ratingsVSexperience [,7] <- data[,25]
ratingsVSexperience [,8] <- data[,37]
ratingsVSexperience [,9] <- data[,38]
ratingsVSexperience [,10] <- data[,40]
ratingsVSexperience [,11] <- data[,41]
ratingsVSexperience [,12] <- data[,42]
ratingsVSexperience [,13] <- data[,16]
ratingsVSexperience <- as.table(ratingsVSexperience)
